{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport clsx from 'clsx';\nimport { Paper, Box } from '@material-ui/core';\nimport { useCustomerStyles } from '~/assets/styles/customer';\nimport { itHasLength } from '~/modules/utils/objects';\nimport { WithAvatar, AvatarIndicator } from '~/components/customer/AvatarBox';\n\nconst BannerItem = props => {\n  const {\n    dataObj,\n    thumbProps\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"dataObj\", \"thumbProps\"]);\n\n  const classes = useCustomerStyles();\n  return __jsx(Paper, {\n    className: clsx(classes.paper, classes.bgPaper)\n  }, !itHasLength(dataObj) ? __jsx(Box, {\n    className: classes.spacing\n  }, __jsx(AvatarIndicator, {\n    dimensions: thumbProps\n  })) : __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    className: clsx(classes.spacing, classes.headerLink)\n  }, __jsx(WithAvatar, _extends({}, restProps, {\n    title: dataObj.title,\n    imageSrc: dataObj.image,\n    dimensions: thumbProps,\n    imgProps: {\n      // @TODO Send it to sentry.io\n      onError: ({\n        target\n      }) => console.error('Avatar fetching error.', target)\n    }\n  }))));\n};\n\nexport default BannerItem;","map":null,"metadata":{},"sourceType":"module"}