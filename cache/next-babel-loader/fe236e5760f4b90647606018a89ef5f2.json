{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { database, parseQuerySnapshot } from '~/modules/firebase/services';\nimport { itHasValue } from '~/modules/utils/objects';\n\nvar composeQuery = function composeQuery() {\n  var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var customersRef = database.collection('customers'); // fetch ONLY published records.\n\n  var customersQuery = customersRef.where('status', '==', 'published');\n  var props = {\n    customersQuery: customersQuery\n  };\n\n  if (itHasValue(query.category)) {\n    props.customersQuery = customersQuery.where('category', 'array-contains', query.category);\n  }\n\n  var orderedQuery = props.customersQuery.orderBy('title');\n  return orderedQuery;\n};\n\nvar getCustomers = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    var props, customersQuery, querySnapshot, customersArray;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            props = {\n              customers: []\n            };\n            customersQuery = composeQuery(query);\n            _context.next = 4;\n            return customersQuery.get();\n\n          case 4:\n            querySnapshot = _context.sent;\n\n            if (!(Boolean(querySnapshot.size) && querySnapshot.size > 0)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 8;\n            return parseQuerySnapshot(querySnapshot);\n\n          case 8:\n            customersArray = _context.sent;\n            props.customers = customersArray;\n\n          case 10:\n            return _context.abrupt(\"return\", props.customers);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getCustomers(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default getCustomers;","map":null,"metadata":{},"sourceType":"module"}