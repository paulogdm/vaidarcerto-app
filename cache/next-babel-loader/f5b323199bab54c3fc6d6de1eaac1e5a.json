{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport fetchGlobals from '~/services/api/global-settings';\nimport fetchPost from '~/services/api/get-post';\nimport { searchClient, findResultsState, createURL, pathToSearchState, searchStateToURL } from '~/modules/instantsearch';\nimport { itHasLength } from '~/modules/utils/objects';\nimport Layout from '~/components/Layout';\nimport Header from '~/components/Header';\nimport Footer from '~/components/Footer';\nconst debounceTime = 700;\nconst DynamicSearchApp = dynamic(() => import('~/modules/instantsearch/SearchApp'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('~/modules/instantsearch/SearchApp')],\n    modules: ['~/modules/instantsearch/SearchApp']\n  }\n});\n\nconst Search = props => {\n  const {\n    page,\n    seoProps\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"page\", \"seoProps\"]);\n\n  const router = useRouter();\n  const setStateId = React.useRef();\n  const {\n    0: searchState,\n    1: setSearchState\n  } = useState(pathToSearchState(router.asPath));\n\n  const onSearchStateChange = nextSearchState => {\n    clearTimeout(setStateId);\n    setStateId.current = setTimeout(() => {\n      const href = searchStateToURL(router, nextSearchState);\n      router.push(href, href, {\n        shallow: true\n      });\n      setSearchState(nextSearchState);\n    }, debounceTime);\n  };\n\n  return __jsx(Layout, _extends({}, restProps, {\n    routerProps: router,\n    seoProps: seoProps\n  }), __jsx(Header, _extends({\n    router: router\n  }, props)), __jsx(DynamicSearchApp, {\n    hasFilters: true,\n    searchState: searchState,\n    resultsState: restProps.resultsState,\n    onSearchStateChange: onSearchStateChange,\n    createURL: createURL\n  }), __jsx(Footer, _extends({\n    router: router\n  }, props)));\n};\n\nexport const getServerSideProps = async (_ref) => {\n  let {\n    req,\n    res,\n    query\n  } = _ref,\n      restProps = _objectWithoutProperties(_ref, [\"req\", \"res\", \"query\"]);\n\n  const searchState = pathToSearchState(req.url);\n  const stateFounded = await findResultsState(DynamicSearchApp, {\n    searchClient,\n    indexName: 'customers',\n    searchState\n  });\n  const resultsState = JSON.parse(JSON.stringify(stateFounded));\n  const globalsResponse = await fetchGlobals();\n  const dataProps = {\n    isNotFound: false\n  };\n  const slugQuery = '/search';\n  const queryOptions = {\n    label: 'slug',\n    value: slugQuery\n  };\n  const page = await fetchPost(queryOptions);\n\n  if (!itHasLength(page)) {\n    dataProps.isNotFound = true;\n  } else {\n    // @TODO build the SEO based in the informed URL params.\n    /// -----\n    const seoProps = {\n      title: page.title,\n      description: page.description\n    };\n    dataProps.seoProps = seoProps;\n  }\n\n  return {\n    props: _objectSpread(_objectSpread(_objectSpread({}, globalsResponse), dataProps), {}, {\n      page,\n      resultsState,\n      searchState\n    })\n  };\n};\nexport default Search;","map":null,"metadata":{},"sourceType":"module"}