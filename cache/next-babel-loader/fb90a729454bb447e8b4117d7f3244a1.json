{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\n\nconst CopyToClipboardButton = props => {\n  const {\n    children,\n    url,\n    setAlertOpened\n  } = props,\n        rest = _objectWithoutProperties(props, [\"children\", \"url\", \"setAlertOpened\"]);\n\n  const handleCopy = ({\n    event,\n    url\n  }) => {\n    event.preventDefault();\n    navigator.clipboard.writeText(url).then(() => {\n      setAlertOpened(true);\n    });\n  };\n\n  return __jsx(\"div\", _extends({}, rest, {\n    onClick: event => handleCopy({\n      event,\n      url\n    })\n  }), children);\n};\n\nexport default CopyToClipboardButton;","map":null,"metadata":{},"sourceType":"module"}