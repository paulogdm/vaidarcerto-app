{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport grey from '@material-ui/core/colors/grey';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport LightbulbIcon from '~/components/LightbulbIcon';\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    paddingTop: theme.spacing(1),\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2)\n  },\n  labelOverline: _objectSpread(_objectSpread({}, theme.typography.overline), {}, {\n    color: grey[700]\n  }),\n  inputLabel: {\n    fontWeight: theme.typography.fontWeightBold,\n    fontSize: theme.typography.fontSize\n  },\n  lightBulb: {\n    verticalAlign: 'middle',\n    marginRight: theme.spacing(1),\n    fontSize: 'medium',\n    color: grey[600]\n  },\n  formHelperText: _objectSpread(_objectSpread({}, theme.typography.body2), {}, {\n    color: grey[600]\n  }),\n  wordWrap: {\n    whiteSpace: 'pre-wrap',\n    wordWrap: 'break-word'\n  }\n}));\n\nconst CustomTextField = props => {\n  const {\n    shrink,\n    helperText,\n    InputStartAdornment,\n    InputEndAdornment\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"shrink\", \"helperText\", \"InputStartAdornment\", \"InputEndAdornment\"]);\n\n  const classes = useStyles();\n  const InputLabelProps = shrink ? {\n    InputLabelProps: {\n      shrink: true,\n      className: clsx(classes.labelOverline, classes.inputLabel)\n    }\n  } : {};\n  const helperTextProps = helperText ? {\n    helperText: __jsx(React.Fragment, null, __jsx(LightbulbIcon, {\n      className: classes.lightBulb\n    }), __jsx(Typography, {\n      variant: \"body2\",\n      component: \"span\"\n    }, helperText)),\n    FormHelperTextProps: {\n      className: clsx(classes.formHelperText, classes.wordWrap)\n    }\n  } : {};\n  const adornmentClass = {\n    classes: {\n      root: classes.labelOverline\n    }\n  };\n  const InputProps = InputStartAdornment ? {\n    InputProps: {\n      startAdornment: __jsx(InputStartAdornment, _extends({\n        position: \"start\"\n      }, adornmentClass))\n    }\n  } : InputEndAdornment ? {\n    InputProps: {\n      endAdornment: React.cloneElement(InputEndAdornment, _objectSpread({\n        position: 'end'\n      }, adornmentClass))\n    }\n  } : {};\n  return __jsx(TextField, _extends({}, restProps, {\n    className: classes.textField\n  }, helperTextProps, InputLabelProps, InputProps));\n};\n\nexport default CustomTextField;","map":null,"metadata":{},"sourceType":"module"}