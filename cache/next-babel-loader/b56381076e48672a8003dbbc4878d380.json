{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    '@media (max-width: 640px)': {\n      display: 'block'\n    }\n  },\n  total: props => ({\n    position: 'relative',\n    overflow: 'inherit',\n    width: 'calc(33% - 20px)',\n    maxWidth: 'calc(33% - 20px)',\n    // minWidth: 'calc(33% - 20px)',\n    margin: '0 10px 10px',\n    padding: 16,\n    border: 'solid 1px #dbe9f5',\n    borderRadius: 10,\n    boxShadow: '0 4px 6px 0 rgba(31, 70, 88, .04)',\n    '&:after': {\n      content: '\"\"',\n      height: '40px',\n      width: '6px',\n      borderRadius: 4,\n      boxShadow: '0 3px 8px 0 rgba(93,120,255,.28)',\n      position: 'absolute',\n      top: '26px',\n      left: '-3px'\n    },\n    '@media (max-width: 640px)': !props.hasLayoutAdjusts ? {\n      margin: '0 5px 10px',\n      width: '90%',\n      maxWidth: '90%',\n      minWidth: '90%'\n    } : {\n      minWidth: 'calc(98% - 10px)'\n    },\n    '@media (max-width: 480px)': !props.hasLayoutAdjusts ? {\n      margin: '0 5px 10px',\n      width: 'calc(90% - 10px)',\n      maxWidth: 'calc(90% - 10px)',\n      minWidth: 'calc(90% - 10px)'\n    } : {\n      width: 'calc(98% - 10px)',\n      maxWidth: 'calc(98% - 10px)',\n      minWidth: 'calc(98% - 10px)'\n    }\n  }),\n  contentInfo: {\n    width: '100%'\n  },\n  totalConfirmedCases: {\n    '&:after': {\n      background: '#5d78ff'\n    }\n  },\n  totalDeaths: {\n    '&:after': {\n      background: '#fab822'\n    }\n  },\n  totalLethality: {\n    '&:after': {\n      background: '#fb397a'\n    }\n  },\n  labelTotal: {\n    marginRight: 12,\n    fontWeight: 700,\n    fontSize: 40,\n    lineHeight: '48px',\n    letterSpacing: -1.29\n  },\n  labelTitle: {\n    color: '#172b3e',\n    fontSize: 18,\n    fontWeight: 700,\n    lineHeight: '18px',\n    letterSpacing: -.54\n  }\n}));\n\nconst GeneralDataCard = props => {\n  const {\n    total_confirmado,\n    total_obitos,\n    total_letalidade\n  } = props,\n        propsRest = _objectWithoutProperties(props, [\"total_confirmado\", \"total_obitos\", \"total_letalidade\"]);\n\n  const labels = propsRest.labels;\n  const classes = useStyles(propsRest);\n  return __jsx(Box, {\n    className: classes.root\n  }, __jsx(Card, {\n    className: clsx(classes.total, classes.totalConfirmedCases)\n  }, __jsx(\"div\", {\n    className: classes.contentInfo\n  }, __jsx(Typography, {\n    className: classes.labelTotal,\n    style: {\n      color: '#5d78ff'\n    }\n  }, total_confirmado), __jsx(Typography, {\n    className: classes.labelTitle\n  }, labels.confirmedCases))), __jsx(Card, {\n    className: clsx(classes.total, classes.totalDeaths)\n  }, __jsx(\"div\", {\n    className: classes.contentInfo\n  }, __jsx(Typography, {\n    className: classes.labelTotal,\n    style: {\n      color: '#fab822'\n    }\n  }, total_obitos), __jsx(Typography, {\n    className: classes.labelTitle\n  }, labels.deaths))), __jsx(Card, {\n    className: clsx(classes.total, classes.totalLethality)\n  }, __jsx(\"div\", {\n    className: classes.contentInfo\n  }, __jsx(Typography, {\n    className: classes.labelTotal,\n    style: {\n      color: '#fb397a'\n    }\n  }, total_letalidade), __jsx(Typography, {\n    className: classes.labelTitle\n  }, labels.lethality))));\n};\n\nexport default GeneralDataCard;","map":null,"metadata":{},"sourceType":"module"}