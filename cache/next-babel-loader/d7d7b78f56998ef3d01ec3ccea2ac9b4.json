{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport NumberFormat from 'react-number-format';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Typography, Paper, Button, InputAdornment } from '@material-ui/core';\nimport { Skeleton, Autocomplete } from '@material-ui/lab';\nimport { cleanDigits } from '~/modules/utils/strings';\nimport { itHasLength } from '~/modules/utils/objects';\nimport fetchCategories from '~/services/api/get-categories';\nimport fetchPost from '~/services/api/get-post';\nimport fetchGlobals from '~/services/api/global-settings';\nimport createAd from '~/services/api/customers/create';\nimport Layout from '~/components/Layout';\nimport Header from '~/components/Header';\nimport TextField from '~/components/form/TextField';\nimport Footer from '~/components/Footer';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(1),\n    padding: theme.spacing(3)\n  },\n  alignRight: {\n    alignSelf: 'flex-end',\n    textAlign: 'right'\n  },\n  inputRoot: {\n    paddingTop: theme.spacing(1.5)\n  },\n  labelToInputSpaces: {\n    marginTop: 0,\n    [theme.breakpoints.down('xs')]: {\n      marginTop: 30\n    }\n  },\n  chipRoot: {\n    margin: theme.spacing(0.5)\n  }\n}));\nconst DynamicSnackbar = dynamic(() => import('~/components/Snackbar'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('~/components/Snackbar')],\n    modules: ['~/components/Snackbar']\n  }\n});\n\nconst hasValue = (arr, key, prop) => arr[key] && arr[key][prop] && arr[key][prop].length > 0 ? arr[key][prop] : false;\n\nconst DigitsOnlyCustom = (_ref) => {\n  let {\n    inputRef\n  } = _ref,\n      other = _objectWithoutProperties(_ref, [\"inputRef\"]);\n\n  return __jsx(NumberFormat, _extends({}, other, {\n    format: other.format,\n    mask: \"_\"\n  }));\n};\n\nconst CharsCountAdortment = (_ref2) => {\n  let {\n    obj\n  } = _ref2,\n      other = _objectWithoutProperties(_ref2, [\"obj\"]);\n\n  return __jsx(InputAdornment, other, obj.value && obj.value.length || 0, '/', obj.lengthDesired.max);\n};\n\nconst PageContent = props => {\n  const {\n    fields,\n    requiredFieldsLabel,\n    submitLabel,\n    errorMessage,\n    successMessage,\n    analysisMessage\n  } = props;\n  const {\n    0: values,\n    1: setValues\n  } = useState(fields);\n  const {\n    0: formErrors,\n    1: setFormErrors\n  } = useState({});\n  const {\n    0: isSending,\n    1: setSending\n  } = useState(false);\n  const {\n    0: isAlertOpened,\n    1: setOpenAlert\n  } = useState(false);\n  const {\n    0: isBlockedButton,\n    1: setBlockedButton\n  } = useState(false);\n  const {\n    0: alertMessage,\n    1: setAlertMessage\n  } = useState({});\n  const classes = useStyles();\n\n  const handleChange = event => {\n    const newObj = {\n      [event.target.name]: _objectSpread(_objectSpread({}, values[event.target.name]), {}, {\n        value: event.target.value\n      })\n    };\n    setValues(_objectSpread(_objectSpread({}, values), newObj));\n  };\n\n  const onFormErrors = newObj => {\n    setFormErrors(newObj);\n  };\n\n  const onHandleSubmit = event => {\n    event.preventDefault();\n    const newObjValues = {};\n    const newObjErrors = {}; // Checking for type of inputs..\n\n    Object.keys(values).map(kI => {\n      if (hasValue(values, kI, 'value')) {\n        let _tempValue = values[kI].value;\n\n        if (values[kI].type === 'tel') {\n          _tempValue = cleanDigits(values[kI].value);\n          if (!_tempValue) newObjErrors[kI] = {\n            unclean: true\n          };\n        } // In case there's a value after all, try to check its length..\n\n\n        if (_tempValue.length < values[kI].lengthDesired.min) {\n          newObjErrors[kI] = {\n            notMin: true\n          };\n        } else if (_tempValue.length > values[kI].lengthDesired.max) {\n          newObjErrors[kI] = {\n            exceedMax: true\n          };\n        } else {\n          newObjValues[kI] = _tempValue;\n        } // In case it doesn't has a value but it's a required field..\n\n      } else if (values[kI].required) {\n        newObjErrors[kI] = {\n          required: true\n        };\n      }\n\n      return kI;\n    }); // check for any errors...\n\n    if (Object.keys(newObjErrors).length > 0) {\n      onFormErrors(newObjErrors);\n    } else {\n      onFormErrors({});\n      setSending(true);\n      setBlockedButton(true);\n      setOpenAlert(true);\n      setAlertMessage({\n        type: 'info',\n        text: 'Loading...'\n      }); // Submit the form data...\n\n      createAd({\n        body: JSON.stringify(newObjValues),\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(result => setAlertMessage({\n        type: 'success',\n        text: successMessage\n      })).catch(err => setAlertMessage({\n        type: 'error',\n        text: errorMessage\n      })).finally(() => {\n        setSending(false);\n        setBlockedButton(false);\n      });\n    }\n  };\n\n  const handleClose = () => {\n    setOpenAlert(false);\n    setBlockedButton(false);\n  };\n\n  const {\n    title,\n    primaryText,\n    secondaryText,\n    inCharge,\n    idCard,\n    phone,\n    email,\n    category,\n    address,\n    placeLink,\n    whatsApp,\n    telegram\n  } = values;\n  return __jsx(Box, {\n    component: \"main\"\n  }, (!alertMessage || alertMessage.type !== 'success') && __jsx(Box, {\n    className: clsx(classes.root, classes.alignRight)\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    gutterBottom: true\n  }, requiredFieldsLabel), __jsx(Box, {\n    className: classes.root\n  }, __jsx(Box, {\n    display: \"flex\",\n    width: \"100%\"\n  }, __jsx(TextField, {\n    id: \"title\",\n    name: \"title\",\n    error: Boolean(formErrors.title),\n    label: title.titleLabel,\n    onChange: handleChange,\n    helperText: title.titleInfo,\n    placeholder: title.placeholder,\n    fullWidth: true,\n    margin: \"dense\",\n    required: title.required,\n    shrink: true,\n    inputProps: {\n      maxLength: title.lengthDesired.max\n    },\n    InputEndAdornment: __jsx(CharsCountAdortment, {\n      obj: title\n    })\n  }), __jsx(TextField, {\n    id: \"primaryText\",\n    name: \"primaryText\",\n    error: Boolean(formErrors.primaryText),\n    label: primaryText.titleLabel,\n    onChange: handleChange,\n    placeholder: primaryText.placeholder,\n    helperText: primaryText.titleInfo,\n    fullWidth: true,\n    margin: \"dense\",\n    required: primaryText.required,\n    shrink: true,\n    inputProps: {\n      maxLength: primaryText.lengthDesired.max\n    },\n    InputEndAdornment: __jsx(CharsCountAdortment, {\n      obj: primaryText\n    })\n  })), __jsx(Box, {\n    display: \"flex\",\n    mt: 1,\n    width: \"100%\"\n  }, __jsx(TextField, {\n    id: \"secondaryText\",\n    name: \"secondaryText\",\n    error: Boolean(formErrors.secondaryText),\n    label: secondaryText.titleLabel,\n    onChange: handleChange,\n    style: {\n      width: '100%'\n    },\n    placeholder: secondaryText.titleInfo,\n    multiline: true,\n    rows: 2,\n    rowsMax: 4,\n    required: secondaryText.required,\n    helperText: secondaryText.titleInfo,\n    margin: \"normal\",\n    shrink: true,\n    inputProps: {\n      maxLength: secondaryText.lengthDesired.max\n    },\n    InputEndAdornment: __jsx(CharsCountAdortment, {\n      obj: secondaryText\n    })\n  })), __jsx(Box, {\n    display: \"flex\",\n    mt: 1,\n    width: \"100%\"\n  }, __jsx(TextField, {\n    id: \"inCharge\",\n    name: \"inCharge\",\n    error: Boolean(formErrors.inCharge),\n    label: inCharge.titleLabel,\n    onChange: handleChange,\n    style: {\n      width: '50%'\n    },\n    required: inCharge.required,\n    margin: \"normal\",\n    shrink: true,\n    inputProps: {\n      maxLength: inCharge.lengthDesired.max\n    },\n    InputEndAdornment: __jsx(CharsCountAdortment, {\n      obj: inCharge\n    })\n  }), __jsx(TextField, {\n    id: \"idCard\",\n    name: \"idCard\",\n    error: Boolean(formErrors.idCard),\n    label: idCard.titleLabel,\n    onChange: handleChange,\n    style: {\n      width: '50%'\n    },\n    required: idCard.required,\n    helperText: idCard.titleInfo,\n    margin: \"normal\",\n    shrink: true,\n    inputProps: {\n      maxLength: idCard.lengthDesired.max\n    },\n    InputEndAdornment: __jsx(CharsCountAdortment, {\n      obj: idCard\n    })\n  })), __jsx(Box, {\n    display: \"flex\",\n    width: \"100%\"\n  }, __jsx(TextField, {\n    id: \"phone\",\n    name: \"phone\",\n    error: Boolean(formErrors.phone),\n    label: phone.titleLabel,\n    onChange: handleChange,\n    style: {\n      width: '50%'\n    },\n    helperText: phone.titleInfo,\n    required: phone.required,\n    type: phone.type,\n    margin: \"normal\",\n    required: phone.required,\n    shrink: true,\n    InputProps: {\n      inputComponent: DigitsOnlyCustom,\n      inputProps: {\n        format: phone.format,\n        allowEmptyFormatting: phone.showMask\n      }\n    }\n  }), __jsx(TextField, {\n    id: \"email\",\n    name: \"email\",\n    error: Boolean(formErrors.email),\n    label: email.titleLabel,\n    onChange: handleChange,\n    style: {\n      width: '50%'\n    },\n    helperText: email.titleInfo,\n    type: \"email\",\n    required: email.required,\n    margin: \"normal\",\n    shrink: true,\n    inputProps: {\n      maxLength: email.lengthDesired.max\n    },\n    InputEndAdornment: __jsx(CharsCountAdortment, {\n      obj: email\n    })\n  })), __jsx(Box, {\n    display: \"flex\",\n    mt: 1,\n    width: \"100%\"\n  }, __jsx(Autocomplete, {\n    id: \"category\",\n    multiple: true,\n    size: \"small\",\n    classes: {\n      inputRoot: classes.inputRoot\n    },\n    onChange: (event, newValue) => {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        category: _objectSpread(_objectSpread({}, values.category), {}, {\n          value: newValue\n        })\n      }));\n    },\n    style: {\n      display: 'flex',\n      width: '100%'\n    },\n    options: category.categoriesList,\n    defaultValue: category.defaultValues,\n    filterSelectedOptions: true,\n    ChipProps: {\n      size: 'medium',\n      classes: {\n        root: classes.chipRoot\n      }\n    },\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      variant: \"standard\",\n      name: \"category\",\n      error: Boolean(formErrors.category),\n      label: category.titleLabel,\n      placeholder: category.placeholder,\n      margin: \"normal\",\n      helperText: category.titleInfo,\n      shrink: true\n    }))\n  })), __jsx(Box, {\n    display: \"flex\",\n    mt: 1,\n    width: \"100%\"\n  }, __jsx(TextField, {\n    id: \"address\",\n    name: \"address\",\n    error: Boolean(formErrors.address),\n    label: address.titleLabel,\n    onChange: handleChange,\n    style: {\n      width: '50%'\n    },\n    helperText: address.titleInfo,\n    margin: \"dense\",\n    shrink: true,\n    inputProps: {\n      maxLength: address.lengthDesired.max\n    },\n    InputEndAdornment: __jsx(CharsCountAdortment, {\n      obj: address\n    })\n  }), __jsx(TextField, {\n    id: \"placeLink\",\n    name: \"placeLink\",\n    error: Boolean(formErrors.placeLink),\n    onChange: handleChange,\n    label: placeLink.titleLabel,\n    style: {\n      width: '50%'\n    },\n    helperText: placeLink.titleInfo,\n    margin: \"dense\",\n    shrink: true,\n    inputProps: {\n      maxLength: placeLink.lengthDesired.max\n    },\n    InputEndAdornment: __jsx(CharsCountAdortment, {\n      obj: placeLink\n    })\n  })), __jsx(Box, {\n    display: \"flex\",\n    my: 2,\n    width: \"100%\"\n  }, __jsx(TextField, {\n    id: \"whatsApp\",\n    name: \"whatsApp\",\n    error: Boolean(formErrors.whatsApp),\n    label: whatsApp.titleLabel,\n    onChange: handleChange,\n    style: {\n      width: '50%'\n    },\n    type: whatsApp.type,\n    helperText: whatsApp.titleInfo,\n    margin: \"normal\",\n    required: whatsApp.required,\n    shrink: true,\n    InputProps: {\n      inputComponent: DigitsOnlyCustom,\n      inputProps: {\n        format: whatsApp.format,\n        allowEmptyFormatting: whatsApp.showMask,\n        className: classes.labelToInputSpaces\n      }\n    }\n  }), __jsx(TextField, {\n    id: \"telegram\",\n    name: \"telegram\",\n    error: Boolean(formErrors.telegram),\n    label: telegram.titleLabel,\n    onChange: handleChange,\n    style: {\n      width: '50%'\n    },\n    placeholder: telegram.username,\n    helperText: telegram.titleInfo,\n    margin: \"normal\",\n    shrink: true,\n    inputProps: {\n      maxLength: telegram.lengthDesired.max\n    },\n    InputEndAdornment: __jsx(CharsCountAdortment, {\n      obj: telegram\n    })\n  }))), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.alignRight,\n    style: {\n      margin: 20,\n      width: 200\n    },\n    onClick: onHandleSubmit,\n    disabled: isBlockedButton\n  }, submitLabel)), __jsx(DynamicSnackbar, {\n    open: isAlertOpened,\n    onClose: handleClose,\n    messageClass: alertMessage !== null && alertMessage.type || 'info',\n    message: alertMessage !== null && alertMessage.text\n  }), alertMessage && alertMessage.type === 'success' && __jsx(Box, {\n    className: classes.root,\n    justifyContent: \"center\",\n    p: 4,\n    minHeight: 200,\n    width: \"100%\"\n  }, __jsx(Typography, {\n    variant: \"subtitle1\"\n  }, analysisMessage)));\n};\n\nconst AuthRegister = props => {\n  const {\n    page,\n    seoProps,\n    isNotFound\n  } = props,\n        rest = _objectWithoutProperties(props, [\"page\", \"seoProps\", \"isNotFound\"]);\n\n  const router = useRouter();\n  const {\n    0: categoriesList,\n    1: setCategories\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: pageOptions,\n    1: setPageOptions\n  } = useState(page);\n  const classes = useStyles();\n  useEffect(() => {\n    if (!Boolean(isNotFound)) {\n      fetchCategories().then(result => setCategories(result)).catch(err => {\n        console.error('Fetching categories list: ', err);\n        setCategories([]);\n      }).finally(() => setLoading(false));\n    }\n  }, [isNotFound]);\n  useEffect(() => {\n    if (itHasLength(categoriesList)) {\n      const {\n        fields,\n        requiredFieldsLabel,\n        submitLabel\n      } = page,\n            pageRest = _objectWithoutProperties(page, [\"fields\", \"requiredFieldsLabel\", \"submitLabel\"]); // Define a new property to `category`..\n\n\n      fields.category.categoriesList = categoriesList.tagsList;\n      const globalLabels = {\n        fields,\n        requiredFieldsLabel,\n        submitLabel,\n        errorMessage: pageRest.errorMessage,\n        successMessage: pageRest.successMessage,\n        analysisMessage: pageRest.analysisMessage\n      };\n      const pageOptions = {\n        globalLabels,\n        title: pageRest.title,\n        slug: pageRest.slug\n      };\n      setPageOptions(pageOptions);\n    }\n  }, [router.query, categoriesList]);\n\n  if (!itHasLength(pageOptions) || isNotFound) {\n    return __jsx(\"p\", null, \"The Register page you're looking for was not found.\");\n  }\n\n  return __jsx(Layout, _extends({}, props, {\n    routerProps: router,\n    seoProps: seoProps\n  }), __jsx(Header, _extends({\n    router: router\n  }, props)), __jsx(Paper, {\n    elevation: 3,\n    className: classes.paper\n  }, itHasLength(pageOptions) && itHasLength(pageOptions.globalLabels) ? __jsx(PageContent, pageOptions.globalLabels) : __jsx(Box, {\n    className: clsx(classes.root, classes.alignRight)\n  }, __jsx(Box, {\n    display: \"flex\",\n    alignSelf: \"flex-end\",\n    width: \"90%\"\n  }, __jsx(Skeleton, {\n    variant: \"text\",\n    width: '100%',\n    height: 50\n  })), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    mt: 2,\n    width: \"100%\"\n  }, __jsx(Box, {\n    pb: 1,\n    w: '50%'\n  }, __jsx(Skeleton, {\n    variant: \"rect\",\n    height: 30\n  }), __jsx(Skeleton, {\n    variant: \"rect\",\n    height: 30\n  })), __jsx(Box, {\n    pb: 1,\n    w: '50%'\n  }, __jsx(Skeleton, {\n    variant: \"rect\",\n    height: 30\n  }), __jsx(Skeleton, {\n    variant: \"rect\",\n    height: 30\n  })), __jsx(Skeleton, {\n    variant: \"rect\",\n    animation: \"wave\",\n    height: 30\n  }), __jsx(Skeleton, {\n    variant: \"rect\",\n    height: 30\n  }), __jsx(Skeleton, {\n    variant: \"rect\",\n    height: 30\n  })))), __jsx(Footer, _extends({\n    router: router\n  }, props)));\n};\n\nexport const getServerSideProps = async ({\n  query\n}) => {\n  const globalsResponse = await fetchGlobals();\n  const dataProps = {\n    isNotFound: false\n  };\n  const slugQuery = 'auth/register';\n  const queryOptions = {\n    label: 'slug',\n    value: slugQuery\n  };\n  const page = await fetchPost(queryOptions);\n\n  if (!itHasLength(page)) {\n    dataProps.isNotFound = true;\n  } else {\n    const seoProps = {\n      title: page.title,\n      description: page.description\n    };\n    dataProps.seoProps = seoProps;\n  }\n\n  return {\n    props: _objectSpread(_objectSpread(_objectSpread({}, globalsResponse), dataProps), {}, {\n      page\n    })\n  };\n};\nexport default AuthRegister;","map":null,"metadata":{},"sourceType":"module"}