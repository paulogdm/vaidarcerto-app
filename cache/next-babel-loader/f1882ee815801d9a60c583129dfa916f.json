{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport Grid from '@material-ui/core/Grid';\nimport { itHasLength } from '~/modules/utils/objects';\nimport fetchPost from '~/services/api/get-post';\nimport fetchGlobals from '~/services/api/global-settings';\nimport Layout from '~/components/Layout';\nimport Header from '~/components/Header';\nimport Footer from '~/components/Footer';\nconst CustomersList = dynamic(() => import('~/components/customer/CustomersList'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('~/components/customer/CustomersList')],\n    modules: ['~/components/customer/CustomersList']\n  }\n});\n\nconst Tag = props => {\n  const {\n    page,\n    seoProps,\n    isNotFound\n  } = props,\n        rest = _objectWithoutProperties(props, [\"page\", \"seoProps\", \"isNotFound\"]);\n\n  const router = useRouter();\n  const querySlug = router.query.slug;\n\n  if (isNotFound) {\n    return __jsx(\"p\", null, \"The page you're looking for was not found.\");\n  }\n\n  return __jsx(Layout, _extends({}, rest, {\n    routerProps: router,\n    seoProps: seoProps\n  }), __jsx(Header, _extends({\n    router: router\n  }, props)), __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(CustomersList, {\n    filterProps: {\n      category: querySlug\n    },\n    sectionTitle: `Anunciantes relacionados com \"${querySlug}\"`\n  }))), __jsx(Footer, _extends({\n    router: router\n  }, props)));\n};\n\nexport const getServerSideProps = async (_ref) => {\n  let {\n    query\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"query\"]);\n\n  const globalsResponse = await fetchGlobals();\n  const dataProps = {\n    isNotFound: false\n  };\n  const slugQuery = '/tag/[slug]';\n  const queryOptions = {\n    label: 'slug',\n    value: slugQuery\n  };\n  const page = await fetchPost(queryOptions);\n\n  if (!itHasLength(page)) {\n    dataProps.isNotFound = true;\n  } else {\n    const seoProps = {\n      title: page.title.replace('{tag}', query.slug),\n      description: page.description.replace('{tag}', query.slug)\n    };\n    dataProps.seoProps = seoProps;\n  }\n\n  return {\n    props: _objectSpread(_objectSpread(_objectSpread({}, globalsResponse), dataProps), {}, {\n      page\n    })\n  };\n};\nexport default Tag;","map":null,"metadata":{},"sourceType":"module"}