{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Paper, Box, Typography, Chip } from '@material-ui/core';\nimport NextLink from './Link';\nimport VerticalTabs from './VerticalTabs';\nimport { mockArrayData } from '~/modules/utils/objects';\nimport { capitalize } from '~/modules/utils/strings';\nimport fetchSegments from '~/services/api/get-segments';\n\nvar SegmentLocalInfo = function SegmentLocalInfo(_ref) {\n  var title = _ref.title,\n      values = _ref.values;\n  return __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\"\n  }, __jsx(Typography, {\n    variant: \"subtitle2\"\n  }, title, ': '), __jsx(Typography, {\n    variant: \"subtitle2\",\n    style: {\n      margin: 5\n    }\n  }, typeof values === 'object' ? values.join(' â€” ') : values));\n};\n\nvar TabPanelContent = function TabPanelContent(_ref2) {\n  var localInfo = _ref2.localInfo,\n      primaryText = _ref2.primaryText,\n      categories = _ref2.categories;\n  return __jsx(Box, {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\"\n  }, __jsx(Typography, {\n    variant: \"overline\"\n  }, primaryText), __jsx(Box, {\n    flexDirection: \"column\",\n    width: '100%'\n  }, localInfo !== undefined && Object.values(localInfo).map(function (item, k) {\n    return __jsx(React.Fragment, {\n      key: k\n    }, __jsx(SegmentLocalInfo, item));\n  })), Object.values(categories).map(function (item, k) {\n    return __jsx(React.Fragment, {\n      key: k\n    }, __jsx(Typography, {\n      variant: \"subtitle1\",\n      style: {\n        padding: 2\n      }\n    }, __jsx(NextLink, {\n      href: \"/tag/[slug]\",\n      as: \"/tag/\".concat(item)\n    }, __jsx(Chip, {\n      variant: \"outlined\",\n      color: \"primary\",\n      size: \"small\",\n      clickable: true,\n      label: capitalize(item.replace('-', ' '))\n    }))));\n  }));\n};\n\nvar SegmentList = function SegmentList(props) {\n  var _useState = useState({\n    data: [],\n    status: 'fetching',\n    error: null\n  }),\n      segments = _useState[0],\n      setSegments = _useState[1];\n\n  var handleSegments = function handleSegments(newState) {\n    setSegments(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), newState);\n    });\n  };\n\n  useEffect(function () {\n    var segmentsRef = fetchSegments().then(function (data) {\n      return handleSegments({\n        data: data\n      });\n    }).catch(function (err) {\n      var errorMsg = 'Error getting documents for segments.';\n      handleSegments({\n        error: errorMsg\n      }); // @TODO send `err` to sentry.io\n\n      console.error(errorMsg, err);\n    }).finally(function () {\n      return handleSegments({\n        status: 'finished'\n      });\n    });\n    return function () {\n      return segmentsRef;\n    };\n  }, []);\n  return __jsx(Paper, {\n    elevation: 3,\n    style: {\n      marginBottom: 10,\n      width: '100%'\n    }\n  }, __jsx(VerticalTabs, {\n    height: 300,\n    dataProps: segments.status === 'fetching' ? mockArrayData(6) : segments.data,\n    TabPanelProps: {\n      component: TabPanelContent\n    }\n  }));\n};\n\nexport default SegmentList;","map":null,"metadata":{},"sourceType":"module"}