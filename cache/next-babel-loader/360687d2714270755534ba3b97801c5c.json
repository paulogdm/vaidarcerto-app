{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { database, parseQuerySnapshot } from '~/modules/firebase/services';\nimport { itHasLength } from '~/modules/utils/objects';\n\nvar getCustomer = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    var customerQuery, querySnapshot, props, newObject, item;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            customerQuery = database.collection('customers').where(query.label, '==', query.value).where('status', '==', 'published').limit(1);\n            _context.next = 3;\n            return customerQuery.get();\n\n          case 3:\n            querySnapshot = _context.sent;\n            props = {\n              customerItem: {}\n            };\n\n            if (!(Boolean(querySnapshot.size) && querySnapshot.size > 0)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 8;\n            return parseQuerySnapshot(querySnapshot);\n\n          case 8:\n            newObject = _context.sent;\n\n            if (itHasLength(newObject)) {\n              item = newObject[0];\n              props.customerItem = item;\n            }\n\n          case 10:\n            return _context.abrupt(\"return\", props.customerItem);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getCustomer(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default getCustomer;","map":null,"metadata":{},"sourceType":"module"}