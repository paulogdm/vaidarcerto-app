{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { connectSearchBox } from 'react-instantsearch-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, TextField, Button } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    paddingTop: theme.spacing(1),\n    marginRight: theme.spacing(1)\n  },\n  content: {\n    display: 'flex',\n    [theme.breakpoints.down('xs')]: {\n      flexDirection: 'column'\n    }\n  },\n  button: {\n    marginTop: 23,\n    marginBottom: 10,\n    [theme.breakpoints.down('xs')]: {\n      marginTop: 5\n    }\n  }\n}));\nconst CustomSearchBox = React.forwardRef((props, myRef) => {\n  const classes = useStyles();\n  const {\n    refinementCategory,\n    refinementWhatsApp,\n    currentRefinement,\n    refine,\n    translations = {}\n  } = props;\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    title: currentRefinement\n  });\n  const {\n    0: showChild,\n    1: setShowChild\n  } = useState(false); // Wait until after client-side hydration shows it.\n\n  useEffect(() => {\n    setShowChild(true);\n  }, []);\n\n  const handleChange = evt => {\n    const target = evt.target;\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      [target.name]: target.type === 'checkbox' ? target.checked : target.value\n    }));\n  };\n\n  const handleSubmit = objValues => {\n    refine(objValues.title);\n  };\n\n  if (!showChild) {\n    // You can show some kind of placeholder UI here..\n    return __jsx(\"p\", null, \"Loading \", props.attribute, \"...\");\n  }\n\n  return __jsx(Box, {\n    className: classes.content\n  }, __jsx(TextField, {\n    ref: myRef,\n    id: \"title\",\n    name: \"title\",\n    label: translations.label || 'Name',\n    placeholder: translations.placeholder || 'Search for what you desire...',\n    defaultValue: currentRefinement,\n    onChange: handleChange,\n    className: classes.textField,\n    variant: \"outlined\",\n    margin: \"normal\",\n    size: \"small\",\n    fullWidth: true,\n    InputLabelProps: {\n      shrink: true\n    }\n  }), refinementCategory !== undefined && __jsx(Box, null, refinementCategory), refinementWhatsApp !== undefined && __jsx(Box, null, refinementWhatsApp), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button,\n    onClick: () => handleSubmit(state)\n  }, translations.button || 'Search'));\n});\nconst ConnectedSearchBox = connectSearchBox(CustomSearchBox);\nexport default ConnectedSearchBox;","map":null,"metadata":{},"sourceType":"module"}