{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { connectSearchBox } from 'react-instantsearch-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, TextField, Button } from '@material-ui/core';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    textField: {\n      paddingTop: theme.spacing(1),\n      marginRight: theme.spacing(1)\n    },\n    content: _defineProperty({\n      display: 'flex'\n    }, theme.breakpoints.down('xs'), {\n      flexDirection: 'column'\n    }),\n    button: _defineProperty({\n      marginTop: 23,\n      marginBottom: 10\n    }, theme.breakpoints.down('xs'), {\n      marginTop: 5\n    })\n  };\n});\nvar CustomSearchBox = React.forwardRef(function (props, myRef) {\n  var classes = useStyles();\n  var refinementCategory = props.refinementCategory,\n      refinementWhatsApp = props.refinementWhatsApp,\n      currentRefinement = props.currentRefinement,\n      refine = props.refine,\n      _props$translations = props.translations,\n      translations = _props$translations === void 0 ? {} : _props$translations;\n\n  var _useState = useState({\n    title: currentRefinement\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(false),\n      showChild = _useState2[0],\n      setShowChild = _useState2[1]; // Wait until after client-side hydration shows it.\n\n\n  useEffect(function () {\n    setShowChild(true);\n  }, []);\n\n  var handleChange = function handleChange(evt) {\n    var target = evt.target;\n    setState(_objectSpread(_objectSpread({}, state), {}, _defineProperty({}, target.name, target.type === 'checkbox' ? target.checked : target.value)));\n  };\n\n  var handleSubmit = function handleSubmit(objValues) {\n    refine(objValues.title);\n  };\n\n  if (!showChild) {\n    // You can show some kind of placeholder UI here..\n    return __jsx(\"p\", null, \"Loading \", props.attribute, \"...\");\n  }\n\n  return __jsx(Box, {\n    className: classes.content\n  }, __jsx(TextField, {\n    ref: myRef,\n    id: \"title\",\n    name: \"title\",\n    label: translations.label || 'Name',\n    placeholder: translations.placeholder || 'Search for what you desire...',\n    defaultValue: currentRefinement,\n    onChange: handleChange,\n    className: classes.textField,\n    variant: \"outlined\",\n    margin: \"normal\",\n    size: \"small\",\n    fullWidth: true,\n    InputLabelProps: {\n      shrink: true\n    }\n  }), refinementCategory !== undefined && __jsx(Box, null, refinementCategory), refinementWhatsApp !== undefined && __jsx(Box, null, refinementWhatsApp), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button,\n    onClick: function onClick() {\n      return handleSubmit(state);\n    }\n  }, translations.button || 'Search'));\n});\nvar ConnectedSearchBox = connectSearchBox(CustomSearchBox);\nexport default ConnectedSearchBox;","map":null,"metadata":{},"sourceType":"module"}