{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useEffect, useState } from 'react';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport Grid from '@material-ui/core/Grid';\nimport { itHasLength } from '~/modules/utils/objects';\nimport { getStorageMedia } from '~/modules/firebase/services';\nimport fetchCustomer from '~/services/api/get-customer';\nimport fetchGlobals from '~/services/api/global-settings';\nimport Layout from '~/components/Layout';\nimport Header from '~/components/Header';\nimport Footer from '~/components/Footer';\nconst DynamicBusinessCardItem = dynamic(() => import('~/components/BusinessCardItem'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('~/components/BusinessCardItem')],\n    modules: ['~/components/BusinessCardItem']\n  }\n});\nconst CustomersList = dynamic(() => import('~/components/customer/CustomersList'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('~/components/customer/CustomersList')],\n    modules: ['~/components/customer/CustomersList']\n  }\n});\n\nconst getSeoProps = props => ({\n  title: props.title,\n  description: props.primaryText,\n  imageGraph: props.hasLogo ? props.image : null,\n  twitterCardType: 'summary_large_image'\n});\n\nconst Customer = props => {\n  const {\n    customer,\n    isNotFound\n  } = props,\n        rest = _objectWithoutProperties(props, [\"customer\", \"isNotFound\"]);\n\n  const {\n    0: customerData,\n    1: setCustomerData\n  } = useState({\n    data: customer,\n    status: 'finished',\n    error: null\n  });\n  const seoProps = getSeoProps(customerData.data);\n  const router = useRouter();\n\n  const onHandleCustomer = newState => {\n    setCustomerData(prevState => _objectSpread(_objectSpread({}, prevState), newState));\n  };\n\n  useEffect(() => {\n    const slugQuery = router.query.slug;\n\n    if (customerData.data.slug !== slugQuery && customerData.status !== 'fetching') {\n      onHandleCustomer({\n        status: 'fetching'\n      });\n      const queryOptions = {\n        label: 'slug',\n        value: slugQuery\n      };\n      const customersRef = fetchCustomer(queryOptions).then(data => onHandleCustomer({\n        data\n      })).catch(err => {\n        const errorMsg = 'Error getting customer data.';\n        onHandleCustomer({\n          error: errorMsg\n        }); // @TODO send `err` to sentry.io\n\n        console.error(errorMsg, err);\n      }).finally(() => onHandleCustomer({\n        status: 'finished'\n      }));\n      return () => customersRef;\n    }\n  }, [router]);\n\n  if (isNotFound) {\n    return __jsx(\"p\", null, \"The Ad you're looking for is not found.\");\n  }\n\n  return __jsx(Layout, _extends({}, rest, {\n    routerProps: router,\n    seoProps: seoProps\n  }), __jsx(Header, _extends({\n    router: router\n  }, props)), __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-start\"\n  }, __jsx(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    sm: 8\n  }, __jsx(DynamicBusinessCardItem, {\n    item: customerData.data,\n    router: router\n  })), __jsx(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    sm: 4\n  }, __jsx(CustomersList, {\n    filterProps: {\n      category: customerData.data\n    },\n    sectionTitle: \"Conte\\xFAdo relacionado para voc\\xEA\",\n    noAvatar: true\n  }))), __jsx(Footer, _extends({\n    router: router\n  }, props)));\n};\n\nexport const getServerSideProps = async ({\n  query\n}) => {\n  const globalsResponse = await fetchGlobals();\n  const dataProps = {\n    isNotFound: false\n  };\n  const slugQuery = query.slug;\n  const queryOptions = {\n    label: 'slug',\n    value: slugQuery\n  };\n  const customer = await fetchCustomer(queryOptions);\n\n  if (!itHasLength(customer)) {\n    dataProps.isNotFound = true;\n  } else {\n    if (customer.hasLogo && customer.image !== null) {\n      const fetchedImage = await getStorageMedia('ads', customer.image);\n\n      if (fetchedImage) {\n        customer.image = fetchedImage;\n      }\n    }\n  }\n\n  return {\n    props: _objectSpread(_objectSpread(_objectSpread({}, globalsResponse), dataProps), {}, {\n      customer\n    })\n  };\n};\nexport default Customer;","map":null,"metadata":{},"sourceType":"module"}