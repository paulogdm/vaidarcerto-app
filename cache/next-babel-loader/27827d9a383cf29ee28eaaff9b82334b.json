{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { useCustomerStyles } from '~/assets/styles/customer';\nimport { handleLinkClick } from '~/modules/utils/utils-nextjs';\nimport fetchCustomers from '~/services/api/get-customers';\nimport AppContext from '~/AppContext';\n\nconst CustomersListCallback = props => {\n  const {\n    filterBy,\n    children: Component\n  } = props;\n  const {\n    customers,\n    handleCustomers,\n    handleCustomer\n  } = useContext(AppContext);\n  const {\n    0: itemsData,\n    1: setItemsData\n  } = useState({\n    data: customers,\n    status: 'fetching',\n    error: null\n  });\n  const classes = useCustomerStyles();\n\n  const onHandleCustomers = newState => {\n    setItemsData(prevState => _objectSpread(_objectSpread({}, prevState), newState));\n  };\n\n  useEffect(() => {\n    const customersRef = fetchCustomers(filterBy).then(data => {\n      handleCustomers(data);\n      onHandleCustomers({\n        data\n      });\n    }).catch(err => {\n      const errorMsg = 'Error getting documents for customers.';\n      handleCustomers({\n        error: errorMsg\n      }); // @TODO send `err` to sentry.io\n\n      console.error(errorMsg, err);\n    }).finally(() => onHandleCustomers({\n      status: 'finished'\n    }));\n    return () => customersRef;\n  }, [filterBy]);\n  return __jsx(React.Fragment, null, __jsx(Paper, {\n    className: classes.paper\n  }, __jsx(Component, {\n    dataProps: itemsData,\n    handleCustomerProps: handleCustomer,\n    handleLinkClickProps: handleLinkClick\n  })));\n};\n\nexport default CustomersListCallback;","map":null,"metadata":{},"sourceType":"module"}