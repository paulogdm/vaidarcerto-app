{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport { Bar } from 'react-chartjs-2';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  lbTitle: {\n    padding: '18px 16px',\n    fontWeight: 700,\n    letterSpacing: -0.84\n  },\n  bdrBottom: {\n    borderBottom: 'solid 1px rgba(219, 233, 245, 0.6)'\n  },\n  size_18: {\n    fontSize: 18,\n    lineHeight: '24px'\n  },\n  chartCard: {\n    margin: '32px 16px 22px',\n    marginBottom: 50,\n    width: 'calc(100% - 32px)'\n  },\n  noBorder: {\n    border: 'none',\n    boxShadow: 'none'\n  }\n}));\n\nconst ChartCard = props => {\n  const {\n    confirmed = {},\n    deaths = {},\n    labels\n  } = props;\n  const classes = useStyles();\n  return __jsx(Box, {\n    className: clsx(classes.chartCard, classes.noBorder)\n  }, __jsx(Bar, {\n    data: {\n      labels,\n      datasets: [{\n        label: deaths.legend,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgb(250, 184, 34, 1)',\n        borderColor: 'rgb(250, 184, 34, 0.4)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgb(250, 184, 34, 0.4)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgb(250, 184, 34, 0.4)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: deaths.data\n      }, {\n        label: confirmed.legend,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgb(93, 120, 255, 1)',\n        borderColor: 'rgb(93, 120, 255, 0.4)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgb(93, 120, 255, 0.4)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgb(93, 120, 255, 0.4)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: confirmed.data\n      }]\n    },\n    options: {\n      maintainAspectRatio: false,\n      scales: {\n        xAxes: [{\n          stacked: true\n        }],\n        yAxes: [{\n          stacked: true,\n          ticks: {\n            callback(value, index, values) {\n              return Number(value).toLocaleString(navigator.language, {\n                notation: \"compact\"\n              });\n            }\n\n          }\n        }]\n      },\n      legend: {\n        position: 'bottom'\n      }\n    },\n    height: 250\n  }));\n};\n\nconst WeeklyResults = props => {\n  const {\n    data = [],\n    labels\n  } = props;\n  const {\n    0: _labels,\n    1: _setLabels\n  } = useState([]);\n  const {\n    0: _qtdConfirmed,\n    1: _setQtdConfirmed\n  } = useState([]);\n  const {\n    0: _qtdDeaths,\n    1: _setQtdDeaths\n  } = useState([]);\n  useEffect(() => {\n    Object.values(data).map(item => {\n      _setLabels(prev => [...prev, item.label]);\n\n      _setQtdConfirmed(prev => [...prev, item.qtd_confirmado]);\n\n      _setQtdDeaths(prev => [...prev, item.qtd_obito]);\n\n      return item;\n    });\n  }, [data]);\n  const classes = useStyles();\n  return __jsx(\"div\", null, __jsx(Typography, {\n    className: clsx(classes.lbTitle, classes.size_18, classes.bdrBottom),\n    component: \"p\"\n  }, labels.weeklyCases), __jsx(ChartCard, {\n    labels: _labels,\n    confirmed: {\n      legend: labels.confirmed,\n      data: _qtdConfirmed\n    },\n    deaths: {\n      legend: labels.deaths,\n      data: _qtdDeaths\n    }\n  }));\n};\n\nexport default WeeklyResults;","map":null,"metadata":{},"sourceType":"module"}