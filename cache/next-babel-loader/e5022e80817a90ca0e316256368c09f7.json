{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Paper, Box, Typography, Chip } from '@material-ui/core';\nimport NextLink from './Link';\nimport VerticalTabs from './VerticalTabs';\nimport { mockArrayData } from '~/modules/utils/objects';\nimport { capitalize } from '~/modules/utils/strings';\nimport fetchSegments from '~/services/api/get-segments';\n\nconst SegmentLocalInfo = ({\n  title,\n  values\n}) => __jsx(Box, {\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  alignItems: \"center\",\n  justifyContent: \"flex-start\"\n}, __jsx(Typography, {\n  variant: \"subtitle2\"\n}, title, ': '), __jsx(Typography, {\n  variant: \"subtitle2\",\n  style: {\n    margin: 5\n  }\n}, typeof values === 'object' ? values.join(' â€” ') : values));\n\nconst TabPanelContent = ({\n  localInfo,\n  primaryText,\n  categories\n}) => __jsx(Box, {\n  display: \"flex\",\n  flexWrap: \"wrap\",\n  alignItems: \"center\",\n  justifyContent: \"flex-start\"\n}, __jsx(Typography, {\n  variant: \"overline\"\n}, primaryText), __jsx(Box, {\n  flexDirection: \"column\",\n  width: '100%'\n}, localInfo !== undefined && Object.values(localInfo).map((item, k) => __jsx(React.Fragment, {\n  key: k\n}, __jsx(SegmentLocalInfo, item)))), Object.values(categories).map((item, k) => __jsx(React.Fragment, {\n  key: k\n}, __jsx(Typography, {\n  variant: \"subtitle1\",\n  style: {\n    padding: 2\n  }\n}, __jsx(NextLink, {\n  href: `/tag/[slug]`,\n  as: `/tag/${item}`\n}, __jsx(Chip, {\n  variant: \"outlined\",\n  color: \"primary\",\n  size: \"small\",\n  clickable: true,\n  label: capitalize(item.replace('-', ' '))\n}))))));\n\nconst SegmentList = props => {\n  const {\n    0: segments,\n    1: setSegments\n  } = useState({\n    data: [],\n    status: 'fetching',\n    error: null\n  });\n\n  const handleSegments = newState => {\n    setSegments(prevState => _objectSpread(_objectSpread({}, prevState), newState));\n  };\n\n  useEffect(() => {\n    const segmentsRef = fetchSegments().then(data => handleSegments({\n      data\n    })).catch(err => {\n      const errorMsg = 'Error getting documents for segments.';\n      handleSegments({\n        error: errorMsg\n      }); // @TODO send `err` to sentry.io\n\n      console.error(errorMsg, err);\n    }).finally(() => handleSegments({\n      status: 'finished'\n    }));\n    return () => segmentsRef;\n  }, []);\n  return __jsx(Paper, {\n    elevation: 3,\n    style: {\n      marginBottom: 10,\n      width: '100%'\n    }\n  }, __jsx(VerticalTabs, {\n    height: 300,\n    dataProps: segments.status === 'fetching' ? mockArrayData(6) : segments.data,\n    TabPanelProps: {\n      component: TabPanelContent\n    }\n  }));\n};\n\nexport default SegmentList;","map":null,"metadata":{},"sourceType":"module"}